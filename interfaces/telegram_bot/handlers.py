# interfaces/telegram_bot/handlers.py

from aiogram import Router, types, Bot
from aiogram.filters import Command, CommandObject # –î–æ–±–∞–≤–∏–º CommandObject –¥–ª—è /start_profile
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
import os
import json # –ò–º–ø–æ—Ä—Ç json —É–∂–µ –±—ã–ª

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏–∑ control_center
from bot_control.control_center import get_status, start_trading, stop_trading
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
from run_trading_stream import trade_main_for_telegram
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
from config.profile_loader import get_all_profiles, PROFILE_FILE # –î–æ–±–∞–≤–∏–º PROFILE_FILE –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π system_logger –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
from utils.logger import system_logger # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

router = Router()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–û–ù–°–¢–ê–ù–¢–´ –ò –í–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
AUTH_FILE = "config/auth.json" # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
PENDING_AUTH = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ user_id, –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
USER_MESSAGES = {}    # –°–ª–æ–≤–∞—Ä—å: user_id -> [msg_id,...] –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–£–ù–ö–¶–ò–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def load_auth_data() -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç auth.json –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —Å –Ω—É–ª—è"""
    if not os.path.exists(AUTH_FILE):
        os.makedirs(os.path.dirname(AUTH_FILE), exist_ok=True)
        data = {"passwords": {}, "users": {}}
        with open(AUTH_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
        return data
    try:
        with open(AUTH_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ auth.json: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        os.makedirs(os.path.dirname(AUTH_FILE), exist_ok=True)
        data = {"passwords": {}, "users": {}}
        with open(AUTH_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
        return data


def save_auth_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç auth.json"""
    try:
        with open(AUTH_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)
    except IOError as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è auth.json: {e}")

def is_authenticated(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ user_id –≤ —Å–ø–∏—Å–∫–µ users"""
    auth_data = load_auth_data()
    return str(user_id) in auth_data.get("users", {})

def verify_password(password: str) -> str | None:
    """–°–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API-–∫–ª—é—á (–≤ –≤–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–Ω –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞—Ä–æ–ª—è)"""
    # –í –≤–∞—à–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
    auth_data = load_auth_data()
    return auth_data.get("passwords", {}).get(password) # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "api_key" –∏–ª–∏ None

def register_user(user_id: int, api_key_value: str): # –ò–º—è –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. api_key_value –∑–¥–µ—Å—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–π, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ True –∏–ª–∏ –∏–º—è –ø–∞—Ä–æ–ª—è"""
    data = load_auth_data()
    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–ª–æ–≤–∞—Ä—å 'users' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if "users" not in data:
        data["users"] = {}
    data["users"][str(user_id)] = api_key_value # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∏–ª–∏ –∫–ª—é—á API
    save_auth_data(data)
    system_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–¢–ò–õ–ò–¢–ê: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def send_clean(bot: Bot, user_id: int, text: str, **kwargs):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ USER_MESSAGES)
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ ID.
    """
    # –£–¥–∞–ª–∏—Ç—å –í–°–ï —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in USER_MESSAGES:
        for msg_id in USER_MESSAGES[user_id]:
            try:
                await bot.delete_message(chat_id=user_id, message_id=msg_id)
            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É
                system_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        USER_MESSAGES[user_id] = [] # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID
    try:
        msg = await bot.send_message(chat_id=user_id, text=text, **kwargs)
        # –î–æ–±–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        USER_MESSAGES.setdefault(user_id, []).append(msg.message_id)
    except Exception as e:
        system_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ú–ï–ù–Æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

def generate_main_menu(user_id: int) -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã"""
    auth = is_authenticated(user_id)
    kb = [
        [KeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å"), KeyboardButton(text="üì§ –õ–æ–≥")]
    ]
    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–ª–æ–≥–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    # –õ–æ–≥–∏–∫–∞ login/register –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ /login
    # if not auth:
    #     kb.append([KeyboardButton(text="üîê –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")]) # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /login
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False) # one_time_keyboard=False, —á—Ç–æ–±—ã –º–µ–Ω—é –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–æ—Å—å

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(Command("start", "help"))
async def cmd_start(message: types.Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ /help: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –º–µ–Ω—é"""
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    system_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {user_id} ({user_name})")

    if not is_authenticated(user_id):
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /login")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_clean –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    await send_clean(
        bot,
        user_id,
        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
        reply_markup=generate_main_menu(user_id)
    )

@router.message(Command("menu"))
async def cmd_menu(message: types.Message, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ /menu: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–Ω—é"""
    user_id = message.from_user.id
    system_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu –æ—Ç user_id: {user_id}")
    if not is_authenticated(user_id):
        await message.answer("‚õîÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return
    await send_clean(bot, user_id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=generate_main_menu(user_id))

@router.message(Command("login"))
async def cmd_login(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /login: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å"""
    user_id = message.from_user.id
    system_logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /login –æ—Ç user_id: {user_id}")
    if is_authenticated(user_id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é.")
        return
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    PENDING_AUTH.add(user_id)
    await message.answer("üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
@router.message(lambda message: message.from_user.id in PENDING_AUTH)
async def process_password(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ PENDING_AUTH"""
    user_id = message.from_user.id
    password_attempt = message.text.strip()
    system_logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å –æ—Ç user_id: {user_id}")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    PENDING_AUTH.discard(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    api_key_value = verify_password(password_attempt) # api_key_value –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–º
    if api_key_value is not None:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        register_user(user_id, api_key_value) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
        system_logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è user_id: {user_id}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –º–µ–Ω—é
        await send_clean(
            bot,
            user_id,
            "üéâ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            reply_markup=generate_main_menu(user_id)
        )
    else:
        system_logger.warning(f"–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è user_id: {user_id}")
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /login")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç—É—Å")
async def handle_show_status_button(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç—É—Å' """
    user_id = message.from_user.id
    system_logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°—Ç–∞—Ç—É—Å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    if not is_authenticated(user_id):
        await message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞
    await show_detailed_status(message)


async def show_detailed_status(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏)"""
    try:
        status_info = get_status() # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ control_center
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–≤–æ–¥–∞
        status_text = f"üìä **–¢–µ–∫—É—â–∏–π –°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞** üìä\n\n"
        status_text += f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'‚úÖ *–†–∞–±–æ—Ç–∞–µ—Ç*' if status_info['running'] else '‚õîÔ∏è *–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*'}\n"
        status_text += f"**–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:** `{status_info['profile'] if status_info['profile'] else '–ù–µ –≤—ã–±—Ä–∞–Ω'}`\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ –∑–∞–¥–∞—á–∞—Ö –∏ —Å–æ–±—ã—Ç–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        status_text += f"**–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:**\n"
        status_text += f"  - –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ (`main_task`): `{status_info.get('main_task_status', 'N/A')}`\n"
        status_text += f"  - –°–ª—É—à–∞—Ç–µ–ª—å —Ü–µ–Ω (`listener_task`): `{status_info.get('listener_task_status', 'N/A')}`\n"
        status_text += f"  - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω (`processor_task`): `{status_info.get('processor_task_status', 'N/A')}`\n"
        status_text += f"  - –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (`stop_event`): `{status_info.get('stop_event_is_set', 'N/A')}`\n"

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, PnL –∏ —Ç.–¥., –∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã

        await message.answer(status_text, parse_mode="MarkdownV2") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    except Exception as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(lambda message: message.text == "‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å")
async def handle_run_button(message: types.Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å', –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id
    system_logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–ø—É—Å—Ç–∏—Ç—å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    if not is_authenticated(user_id):
        await message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return

    try:
        profiles = get_all_profiles() # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø—Ä–æ—Ñ–∏–ª–µ–π
        if not profiles:
            await message.answer(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Ñ–∞–π–ª–µ `{PROFILE_FILE}`. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        buttons = [
            [InlineKeyboardButton(text=profile_name.upper(), callback_data=f"runprofile_{profile_name}")]
            for profile_name in profiles
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_clean –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_clean(bot, user_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=keyboard)

    except FileNotFoundError:
        system_logger.error(f"–§–∞–π–ª –ø—Ä–æ—Ñ–∏–ª–µ–π '{PROFILE_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π (`{PROFILE_FILE}`) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.")


@router.callback_query(lambda c: c.data.startswith("runprofile_"))
async def handle_run_profile_callback(callback: types.CallbackQuery, bot: Bot): # –î–æ–±–∞–≤–ª—è–µ–º bot –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = callback.from_user.id
    profile_name = callback.data.split("_", 1)[1] # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ callback_data
    system_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}'.")

    if not is_authenticated(user_id):
        await callback.message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ") # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        return

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    try:
        await bot.delete_message(chat_id=user_id, message_id=callback.message.message_id)
        # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ USER_MESSAGES, –µ—Å–ª–∏ —Ç–∞–º —á—Ç–æ-—Ç–æ –±—ã–ª–æ
        if user_id in USER_MESSAGES:
            USER_MESSAGES[user_id] = []
    except Exception as e:
        system_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {callback.message.message_id} —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞
    await bot.send_message( # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message –≤–º–µ—Å—Ç–æ callback.message.answer –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id=user_id,
        text=f"‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å: **`{profile_name}`**...",
        parse_mode="MarkdownV2"
    )

    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ control_center
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–æ—Ä—É—Ç–∏–Ω—É-—Ä–∞–Ω–Ω–µ—Ä (trade_main_for_telegram)
        # system_logger –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ, control_center –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–æ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        response_from_start = await start_trading(profile_name, trade_main_for_telegram)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=user_id, text=response_from_start) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç start_trading
        
    except Exception as e:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞
        system_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ start_trading –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}", exc_info=True)
        await bot.send_message(chat_id=user_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è `{profile_name}`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–π callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


@router.message(lambda message: message.text == "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
async def handle_stop_button(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'"""
    user_id = message.from_user.id
    system_logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    if not is_authenticated(user_id):
        await message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return

    await message.answer("‚è≥ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é...") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    try:
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ control_center
        # system_logger –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ
        reply = await stop_trading()
        await message.answer(reply) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ stop_trading –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


@router.message(lambda message: message.text == "üì§ –õ–æ–≥")
async def handle_ask_log_button(message: types.Message, bot: Bot): # –î–æ–±–∞–≤–ª—è–µ–º bot
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–õ–æ–≥', –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫"""
    user_id = message.from_user.id
    system_logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–õ–æ–≥' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    if not is_authenticated(user_id):
        await message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [ # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
                InlineKeyboardButton(text="üìÑ system (10)", callback_data="log_system_10"),
                InlineKeyboardButton(text="üìÑ system (30)", callback_data="log_system_30"),
            ],
            [ # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
                InlineKeyboardButton(text="üìà trading (10)", callback_data="log_trading_10"),
                InlineKeyboardButton(text="üìà trading (30)", callback_data="log_trading_30"),
            ]
        ]
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_clean –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await send_clean(bot, user_id, "üìú –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith("log_"))
async def handle_show_log_callback(callback: types.CallbackQuery, bot: Bot): # –î–æ–±–∞–≤–ª—è–µ–º bot
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–æ–≥–∞"""
    user_id = callback.from_user.id
    if not is_authenticated(user_id):
        await callback.message.answer("‚õîÔ∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login")
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        return

    try:
        parts = callback.data.split("_") # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä "log_system_10"
        log_type = parts[1] # "system" –∏–ª–∏ "trading"
        count = int(parts[2]) # 10 –∏–ª–∏ 30
    except (IndexError, ValueError):
        system_logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data –¥–ª—è –ª–æ–≥–∞: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–∞.")
        return

    system_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥ '{log_type}', –ø–æ—Å–ª–µ–¥–Ω–∏–µ {count} —Å—Ç—Ä–æ–∫.")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if log_type == "system":
        log_path = "logs/system.log"
    elif log_type == "trading":
        # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–ª–∏ –≤ utils.logger –¥–ª—è trading_logger
        log_path = "logs/trading_activity.log" # –∏–ª–∏ logs/trading_log.log
    else:
        await callback.message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–æ–≥–∞.")
        await callback.answer("–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –ª–æ–≥–∞.")
        return

    # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∞
    try:
        await bot.delete_message(chat_id=user_id, message_id=callback.message.message_id)
        if user_id in USER_MESSAGES:
            USER_MESSAGES[user_id] = []
    except Exception as e:
        system_logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {callback.message.message_id} —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∞: {e}")

    if not os.path.exists(log_path):
        await bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–∞ `{log_path}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        try:
            with open(log_path, "r", encoding="utf-8") as f:
                lines = f.readlines() # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏

            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 'count' —Å—Ç—Ä–æ–∫
            last_lines = lines[-count:]
            
            if not last_lines:
                 await bot.send_message(chat_id=user_id, text=f"‚ÑπÔ∏è –õ–æ–≥-—Ñ–∞–π–ª `{log_path}` –ø—É—Å—Ç.")
                 await callback.answer("–õ–æ–≥ –ø—É—Å—Ç.")
                 return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ``` –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞, –æ–Ω –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª–æ–≥–æ–≤, —á–µ–º <pre>
            log_text = f"üìú **–õ–æ–≥: `{log_path}` (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_lines)} —Å—Ç—Ä–æ–∫)**\n```\n"
            log_text += "".join(last_lines) # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ
            log_text += "\n```"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(log_text) > 4000: # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                log_text = log_text[:4000] + "\n... (–ª–æ–≥ –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã)```"
                system_logger.warning(f"–õ–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã.")

            await bot.send_message(chat_id=user_id, text=log_text, parse_mode="MarkdownV2") # Markdown –¥–ª—è ```
        except Exception as e:
            system_logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ '{log_path}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
            await bot.send_message(chat_id=user_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ `{log_path}`.")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer("–õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

    
      

    