import asyncio
from aiogram.types import BotCommand

from interfaces.telegram_bot.bot_config import bot, dp
from interfaces.telegram_bot.handlers import router
from services.binance_stream import stop_websocket
import signal

# ‚úÖ –ó–∞–¥–∞—ë–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –º–µ–Ω—é Telegram
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
    ]
    await bot.set_my_commands(commands)

# üîÅ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def start_aiogram_bot():
    dp.include_router(router)
    await set_bot_commands()         # üÜï –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await dp.start_polling(bot)


def stop_bot_gracefully(*args):
    """Handles SIGINT/SIGTERM ‚Äî gracefully stops WebSocket and logs shutdown"""
    from run_trading_stream import system_logger
    system_logger.info("üõë Received termination signal in Telegram bot (SIGINT/SIGTERM)")
    stop_websocket()
    print("üõë Bot shutdown signal handled.")

   
# ‚ñ∂ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    
    signal.signal(signal.SIGINT, stop_bot_gracefully)
    signal.signal(signal.SIGTERM, stop_bot_gracefully)

    asyncio.run(start_aiogram_bot())

