import json
import os
import subprocess
from config.settings import (
    COMMISSION_RATE, MIN_PROFIT_RATIO, STOP_LOSS_RATIO,
    TAKE_PROFIT_RATIO, PRICE_PRECISION, MIN_ORDER_QUANTITY, MIN_TRADE_AMOUNT
)

PROFILE_FILE = os.path.join("config", "profiles.json")

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===

def load_profiles():
    if not os.path.exists(PROFILE_FILE):
        return {}
    with open(PROFILE_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_profiles(profiles):
    with open(PROFILE_FILE, "w", encoding="utf-8") as f:
        json.dump(profiles, f, indent=2)


# === –£—Ç–∏–ª–∏—Ç—ã ===

def list_profiles(profiles):
    if not profiles:
        print("üì≠ –ü—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
    for name in profiles:
        print(f" - {name}")

def remove_profile(profiles):
    if not profiles:
        print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
    for name in profiles:
        print(f" - {name}")

    name = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip().lower()
    if name not in profiles:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    confirm = input(f"‚ö†Ô∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å '{name}'? (y/n): ").strip().lower()
    if confirm == 'y':
        del profiles[name]
        save_profiles(profiles)
        print(f"üóëÔ∏è –ü—Ä–æ—Ñ–∏–ª—å '{name}' —É–¥–∞–ª—ë–Ω.")
    else:
        print("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.")



# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è ===

def add_profile(profiles):
    print("\nüÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    print("üîπ –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n")

    name = input("üìù –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: xrp): ").strip().lower()
    if name in profiles:
        overwrite = input(f"‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ").strip().lower()
        if overwrite != 'y':
            print("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return

    def ask_param(key, default, comment=None):
        prompt = f"‚Ä¢ {key} [{default}]"
        if comment:
            prompt += f" ‚Äì {comment}"
        prompt += ": "
        val = input(prompt).strip()
        return cast(val, default)

    def cast(val, base):
        if val == '':
            return base
        if isinstance(base, bool):
            return val.lower() in ['true', '1', 'y']
        if isinstance(base, int):
            return int(val)
        if isinstance(base, float):
            return float(val)
        return val

    profile = {}
    profile["symbol"] = input("üî∏ –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: XRPUSDT): ").strip().upper()
    valid_timeframes = [
    "1m", "3m", "5m", "15m", "30m",
    "1h", "2h", "4h", "6h", "12h", "1d"
]

    while True:
        tf = input(f"üî∏ –¢–∞–π–º—Ñ—Ä–µ–π–º ({'/'.join(valid_timeframes)}): ").strip()
        if tf in valid_timeframes:
            profile["timeframe"] = tf
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


    print("\nüìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")

    profile["use_rsi"] = ask_param("use_rsi", True, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RSI?")
    if profile["use_rsi"]:
        profile["rsi_period"] = ask_param("rsi_period", 14)
        profile["rsi_overbought"] = ask_param("rsi_overbought", 70)
        profile["rsi_oversold"] = ask_param("rsi_oversold", 35)

    profile["use_macd"] = ask_param("use_macd", True, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MACD?")
    if profile["use_macd"]:
        profile["macd_fast_period"] = ask_param("macd_fast_period", 8)
        profile["macd_slow_period"] = ask_param("macd_slow_period", 21)
        profile["macd_signal_period"] = ask_param("macd_signal_period", 9)

    profile["use_macd_for_buy"] = ask_param("use_macd_for_buy", True)
    profile["use_macd_for_sell"] = ask_param("use_macd_for_sell", True)

    profile["use_ema"] = ask_param("use_ema", False, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å EMA-—Ñ–∏–ª—å—Ç—Ä?")
    if profile["use_ema"]:
        profile["ema_period"] = ask_param("ema_period", 50)

    print("\n‚öôÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")

    default_extra = {
        "commission_rate": COMMISSION_RATE,
        "min_profit_ratio": MIN_PROFIT_RATIO,
        "stop_loss_ratio": STOP_LOSS_RATIO,
        "take_profit_ratio": TAKE_PROFIT_RATIO,
        "price_precision": PRICE_PRECISION,
        "min_order_quantity": MIN_ORDER_QUANTITY,
        "min_trade_amount": MIN_TRADE_AMOUNT,
    }

    for key, default in default_extra.items():
        profile[key] = ask_param(key, default)

    profiles[name] = profile
    save_profiles(profiles)
    print(f"\n‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===

def edit_profile(profiles):
    print("\n‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    name = input("üî∏ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ").strip().lower()

    if name not in profiles:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    profile = profiles[name]

    def ask_param(key, current, comment=None):
        prompt = f"‚Ä¢ {key} ({current})"
        if comment:
            prompt += f" ‚Äì {comment}"
        prompt += ": "
        val = input(prompt).strip()
        return cast(val, current)

    def cast(val, base):
        if val == '':
            return base
        if isinstance(base, bool):
            return val.lower() in ['true', '1', 'y']
        if isinstance(base, int):
            return int(val)
        if isinstance(base, float):
            return float(val)
        return val

    print("\nüîß –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    profile["symbol"] = ask_param("symbol", profile.get("symbol", "")).upper()
    valid_timeframes = [
    "1m", "3m", "5m", "15m", "30m",
    "1h", "2h", "4h", "6h", "12h", "1d"
]

    while True:
        current = profile.get("timeframe", "")
        tf = input(f"üî∏ –¢–∞–π–º—Ñ—Ä–µ–π–º ({current}) [{'/'.join(valid_timeframes)}]: ").strip()
        if tf == '':
            profile["timeframe"] = current
            break
        elif tf in valid_timeframes:
            profile["timeframe"] = tf
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")


    print("\nüìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    profile["use_rsi"] = ask_param("use_rsi", profile.get("use_rsi", True))
    if profile["use_rsi"]:
        profile["rsi_period"] = ask_param("rsi_period", profile.get("rsi_period", 14))
        profile["rsi_overbought"] = ask_param("rsi_overbought", profile.get("rsi_overbought", 70))
        profile["rsi_oversold"] = ask_param("rsi_oversold", profile.get("rsi_oversold", 35))

    profile["use_macd"] = ask_param("use_macd", profile.get("use_macd", True))
    if profile["use_macd"]:
        profile["macd_fast_period"] = ask_param("macd_fast_period", profile.get("macd_fast_period", 8))
        profile["macd_slow_period"] = ask_param("macd_slow_period", profile.get("macd_slow_period", 21))
        profile["macd_signal_period"] = ask_param("macd_signal_period", profile.get("macd_signal_period", 9))

    profile["use_macd_for_buy"] = ask_param("use_macd_for_buy", profile.get("use_macd_for_buy", True))
    profile["use_macd_for_sell"] = ask_param("use_macd_for_sell", profile.get("use_macd_for_sell", True))

    profile["use_ema"] = ask_param("use_ema", profile.get("use_ema", False))
    if profile["use_ema"]:
        profile["ema_period"] = ask_param("ema_period", profile.get("ema_period", 50))

    print("\n‚öôÔ∏è –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    trade_fields = [
        "commission_rate", "min_profit_ratio", "stop_loss_ratio",
        "take_profit_ratio", "price_precision", "min_order_quantity", "min_trade_amount"
    ]
    for key in trade_fields:
        profile[key] = ask_param(key, profile.get(key))

    profiles[name] = profile
    save_profiles(profiles)
    print(f"\n‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")


# === –ú–µ–Ω—é ===

if __name__ == "__main__":
    while True:
        print("\nüß† –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print("3. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print("4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print("5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ –ø—Ä–æ—Ñ–∏–ª—é (—Ç–æ—Ä–≥–æ–≤–ª—è –∏–ª–∏ —Ç–µ—Å—Ç)")
        print("6. –í—ã—Ö–æ–¥")
        choice = input("\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()

        if choice == '1':
            profiles = load_profiles()
            list_profiles(profiles)

        elif choice == '2':
            profiles = load_profiles()
            add_profile(profiles)

        elif choice == '3':
            profiles = load_profiles()
            remove_profile(profiles)

        elif choice == '4':
            profiles = load_profiles()
            edit_profile(profiles)

        elif choice == '5':
            profiles = load_profiles()
            if not profiles:
                print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
                continue

            print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
            for name in profiles:
                print(f" - {name}")

            profile_name = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞: ").strip().lower()
            if not profile_name:
                print("‚ùå –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                continue
            if profile_name not in profiles:
                print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            print(f"\nüß© –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
            print("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º?")
            print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
            print("2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç")
            print("3. ‚Ü©Ô∏è –ù–∞–∑–∞–¥")
            action = input("–í—ã–±–æ—Ä (1/2/3): ").strip()

            if action == '1':
                subprocess.run(["python", "run_trading_stream.py", profile_name])
            elif action == '2':
                subprocess.run(["python", "backtest.py", profile_name])
            else:
                print("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")


        elif choice == '6':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")




