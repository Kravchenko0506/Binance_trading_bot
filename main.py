import asyncio
import sys
import os
import importlib
import logging
import datetime
from config.settings import API_KEY, API_SECRET, LOG_FILE, MIN_TRADE_AMOUNT, COMMISSION_RATE, PRICE_PRECISION, MIN_ORDER_QUANTITY
from services.trade_logic import check_buy_sell_signals
from services.order_execution import place_order
from utils.logger import setup_logger

setup_logger()


# –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
profiles_dir = 'config/profiles'
AVAILABLE_PROFILES = [f.replace('.py', '') for f in os.listdir(profiles_dir) if f.endswith('.py') and f != '__init__.py']

# –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö, —Å–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if len(sys.argv) < 2:
    print("\nüöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Binance Trading Bot!")
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    for profile in AVAILABLE_PROFILES:
        print(f" - {profile}")
    print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: xrp):")
    profile_name = input("–ü—Ä–æ—Ñ–∏–ª—å: ").lower()
else:
    profile_name = sys.argv[1].lower()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
if profile_name not in AVAILABLE_PROFILES:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {', '.join(AVAILABLE_PROFILES)}")
    sys.exit(1)

# –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
logging.info(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: {profile_name.upper()}")

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
try:
    profile = importlib.import_module(f"config.profiles.{profile_name}")
except ModuleNotFoundError:
    print(f"–û—à–∏–±–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ config/profiles/")
    sys.exit(1)

# –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ profile
SYMBOL = profile.SYMBOL
TIMEFRAME = profile.TIMEFRAME
USE_RSI = profile.USE_RSI
USE_MACD = profile.USE_MACD
USE_MACD_FOR_BUY = profile.USE_MACD_FOR_BUY
USE_MACD_FOR_SELL = profile.USE_MACD_FOR_SELL
RSI_PERIOD = profile.RSI_PERIOD
RSI_OVERBOUGHT = profile.RSI_OVERBOUGHT
RSI_OVERSOLD = profile.RSI_OVERSOLD
MACD_FAST_PERIOD = profile.MACD_FAST_PERIOD
MACD_SLOW_PERIOD = profile.MACD_SLOW_PERIOD
MACD_SIGNAL_PERIOD = profile.MACD_SIGNAL_PERIOD
COMMISSION_RATE = profile.COMMISSION_RATE

# –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ—É
print(f"\n‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é: {profile_name.upper()} - –ü–∞—Ä–∞: {SYMBOL}")
logging.info(f"–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞—á–∞–ª–∞—Å—å –ø–æ –ø–∞—Ä–µ: {SYMBOL}")

# –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
start_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {start_time}  –ø—Ä–æ—Ñ–∏–ª–µ–º {profile_name.upper()} –¥–ª—è –ø–∞—Ä—ã {SYMBOL}")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
async def main():
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ü–∏–∫–ª —Å –ø–∞—É–∑–æ–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\n‚è≥ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥...")
    while True:
        action = await asyncio.to_thread(check_buy_sell_signals, profile)
        if action != 'hold':
            await asyncio.to_thread(place_order, action, SYMBOL, COMMISSION_RATE)
        await asyncio.sleep(60)


if __name__ == "__main__":
    asyncio.run(main())

    
