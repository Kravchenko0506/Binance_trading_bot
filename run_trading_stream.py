import sys
import asyncio
import subprocess
import os
import pickle
import logging
from types import SimpleNamespace
from config.profile_loader import get_profile_by_name
from services.binance_stream import listen_klines, stop_websocket
from services.trade_logic import check_buy_sell_signals
from services.order_execution import place_order
from utils.logger import setup_logger
from services.technical_indicators import talib
from config.settings import log_enabled_features

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ ===
os.makedirs("logs", exist_ok=True)
system_logger = logging.getLogger("system")
system_logger.setLevel(logging.INFO)
file_handler = logging.FileHandler("logs/system.log", encoding="utf-8")
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
system_logger.addHandler(file_handler)


async def price_processor(queue: asyncio.Queue, profile):
    try:
        while True:
            price = await queue.get()
            action = check_buy_sell_signals(profile)
            if action != 'hold':
                place_order(action, profile.SYMBOL, profile.COMMISSION_RATE)
            queue.task_done()
    except asyncio.CancelledError:
        system_logger.info("üìâ –ó–∞–¥–∞—á–∞ price_processor –æ—Ç–º–µ–Ω–µ–Ω–∞ (CancelledError)")
    except Exception as e:
        system_logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ price_processor: {e}")


async def trade_main(profile):
    setup_logger()
    system_logger.info(f"üöÄ –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é {profile.SYMBOL} –∑–∞–ø—É—â–µ–Ω–∞")

    if talib is None:
        system_logger.warning("‚ö†Ô∏è TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")

    log_enabled_features()

    queue = asyncio.Queue()
    listener = asyncio.create_task(listen_klines(profile.SYMBOL, profile.TIMEFRAME, queue))
    processor = asyncio.create_task(price_processor(queue, profile))

    try:
        await asyncio.gather(listener, processor)
    except asyncio.CancelledError:
        system_logger.info("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ —Å–∏—Å—Ç–µ–º–æ–π (CancelledError)")
        listener.cancel()
        processor.cancel()
        await asyncio.gather(listener, processor, return_exceptions=True)
    except Exception as e:
        system_logger.exception(f"‚ùó –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ trade_main: {e}")
    finally:
        stop_websocket()
        system_logger.info("üì° WebSocket –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (stop_websocket)")


if __name__ == "__main__":
    if len(sys.argv) == 2:
        try:
            profile_dict = get_profile_by_name(sys.argv[1])
            profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})
            asyncio.run(trade_main(profile))
            system_logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            system_logger.exception(f"‚ùó –û—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}")
    else:
        print("‚ùå –£–∫–∞–∂–∏ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.")
        
async def trade_main_for_telegram(profile_name: str):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ Telegram-–±–æ—Ç–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—è
    """
    try:
        profile_dict = get_profile_by_name(profile_name)
        profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})
        await trade_main(profile)
    except Exception as e:
        system_logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑ Telegram: {e}")







  



