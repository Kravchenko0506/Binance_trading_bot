# run_trading_stream.py
import asyncio # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
import threading # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ threading.Event –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
import sys # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ) –∏ sys.exit
import logging # –î–ª—è –≤—ã–∑–æ–≤–∞ logging.shutdown()
from types import SimpleNamespace # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è)
import numpy as np # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ —Ü–µ–Ω, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
import collections # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è collections.deque –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ ---

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–±—ä–µ–∫—Ç settings –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ config.settings
# –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–ª–∞–≥–∏ USE_STOP_LOSS, USE_TAKE_PROFIT, USE_MIN_PROFIT –∏ –¥—Ä.
from config import settings

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏.
# –í–ê–ñ–ù–û: –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å current_close_price –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç,
# –∞ –Ω–µ –¥–µ–ª–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ API-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã.
from utils.profit_check import is_stop_loss_triggered, is_take_profit_reached, is_enough_profit
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
from utils.notifier import send_notification

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∏–º–µ–Ω–∏
from config.profile_loader import get_profile_by_name
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket —Å—Ç—Ä–∏–º–∞ Binance
from services.binance_stream import listen_klines
# –§—É–Ω–∫—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º –∏ –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
from services.trade_logic import check_buy_sell_signals, get_initial_ohlcv
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
from services.order_execution import place_order
# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã: system_logger –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, trading_logger –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
from utils.logger import system_logger, trading_logger
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ stop_event –∏–∑ control_center
from bot_control.control_center import CURRENT_STATE



# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–Ω ---

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π), –∫–æ—Ç–æ—Ä—É—é –º—ã —Ö—Ä–∞–Ω–∏–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.
# –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –¥–ª—è —Å–∞–º–æ–≥–æ "–¥–ª–∏–Ω–Ω–æ–≥–æ" –ø–µ—Ä–∏–æ–¥–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É —Ç–µ–±—è EMA —Å –ø–µ—Ä–∏–æ–¥–æ–º 200, —Ç–æ PRICE_HISTORY_MAX_LEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 200.
PRICE_HISTORY_MAX_LEN = 250
# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
# –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–∫–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä, MACD(12,26,9) —Ç—Ä–µ–±—É–µ—Ç –æ–∫–æ–ª–æ 35+ —Å–≤–µ—á–µ–π,
# RSI(14) —Ç—Ä–µ–±—É–µ—Ç –æ–∫–æ–ª–æ 15+. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Å –∑–∞–ø–∞—Å–æ–º.
MIN_PRICE_HISTORY_FOR_TRADE = 50


async def execute_trade_action(
    action_type: str, # "buy" –∏–ª–∏ "sell"
    symbol: str,
    profile: SimpleNamespace,
    reason_message: str # –°–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –ª–æ–≥–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞),
    –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
    # trading_logger –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, system_logger –¥–ª—è –±–æ–ª–µ–µ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    trading_logger.info(reason_message)
    system_logger.info(f"Price processor ({symbol}): –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ '{action_type}' –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason_message}")

    try:
        # –†–∞–∑–º–µ—â–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ.
        # –í–ê–ñ–ù–û: –ï—Å–ª–∏ place_order - —ç—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–¥–µ–ª–∞–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å),
        # –µ–µ –≤—ã–∑–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–µ—Å—å asyncio event loop. –í –∏–¥–µ–∞–ª–µ, place_order –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
        # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π (async def) –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π,
        # –ª–∏–±–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ await asyncio.to_thread(place_order, ...) (–¥–ª—è Python 3.9+)
        # –∏–ª–∏ await loop.run_in_executor(None, place_order, ...).
        # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω –ª–∏–±–æ –±—ã—Å—Ç—Ä—ã–π, –ª–∏–±–æ —Ç—ã —ç—Ç–æ —É—á—Ç–µ—à—å.
        await place_order(action_type, symbol, profile)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
        await send_notification(reason_message) # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏—á–∏–Ω—É
        system_logger.info(f"Price processor ({symbol}): –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏ '{action_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return True # –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ
    except Exception as e:
        system_logger.error(f"Price processor ({symbol}): –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ '{action_type}': {e}", exc_info=True)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –æ—Ä–¥–µ—Ä–∞
        await send_notification(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ '{action_type}' –¥–ª—è {symbol}. –ü—Ä–∏—á–∏–Ω–∞: {e}. –°–º–æ—Ç—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏.")
        return False # –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å


async def check_and_handle_risk_conditions(
    symbol: str,
    profile: SimpleNamespace,
    current_price: float,
    strategy_has_issued_sell: bool
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:
    1. Stop-loss
    2. Take-profit
    3. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç (–µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª)
    
    –ï—Å–ª–∏ –∫–∞–∫–æ–µ-–ª–∏–±–æ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚Äî –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–¥–∞–∂–∞, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–¥–∞–∂–∞. –ò–Ω–∞—á–µ ‚Äî False.
    """

    from utils.position_manager import has_open_position

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è ===
    # –ï—Å–ª–∏ —Ñ–∞–π–ª last_buy_price –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–Ω–∞—á–∏—Ç ‚Äî –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ
    # –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ø–∞–º–∞ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ take-profit –ø–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
    if not has_open_position(symbol):
        system_logger.debug(f"Risk Check: –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É TP/SL/MinProfit.")
        return False

    # === 1. STOP-LOSS ===
    # –ù–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —É–±—ã—Ç–∫–∞
    if settings.USE_STOP_LOSS and is_stop_loss_triggered(symbol, current_price):
        reason = f"‚ÄºÔ∏è Stop-loss: {symbol} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–∞–µ—Ç—Å—è (—Ü–µ–Ω–∞ {current_price:.6f}) –∏–∑-–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å—Ç–æ–ø-–ª–æ—Å—Å."
        await execute_trade_action("sell", symbol, profile, reason)
        return True

    # === 2. TAKE-PROFIT ===
    # –í—Ç–æ—Ä–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    if settings.USE_TAKE_PROFIT and is_take_profit_reached(symbol, current_price):
        reason = f"‚úÖ Take-profit: {symbol} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏ –ø—Ä–∏–±—ã–ª–∏ (—Ü–µ–Ω–∞ {current_price:.6f}). –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞."
        await execute_trade_action("sell", symbol, profile, reason)
        return True

    # === 3. MIN-PROFIT ===
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ù–ï –¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª `sell`
    if settings.USE_MIN_PROFIT and not strategy_has_issued_sell:
        if is_enough_profit(symbol, current_price):
            reason = f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {symbol} –ø—Ä–æ–¥–∞–µ—Ç—Å—è (—Ü–µ–Ω–∞ {current_price:.6f}) –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –±–µ–∑ —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."
            await execute_trade_action("sell", symbol, profile, reason)
            return True
        # –í–µ—Ç–∫–∞ else –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ is_enough_profit()

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    return False



async def price_processor(
    price_queue: asyncio.Queue,
    profile: SimpleNamespace,
    stop_event_ref: threading.Event
):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω,
    –≤—ã–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É (–≤–∫–ª—é—á–∞—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç) –∏ —Ä–∞–∑–º–µ—â–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞.
    """
    symbol = profile.SYMBOL
    timeframe = profile.TIMEFRAME
    system_logger.info(f"Price processor ({symbol}): –ó–ê–ü–£–©–ï–ù. –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω...")

    # --- 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω ---
    try:
        initial_close_prices_np = get_initial_ohlcv(symbol, timeframe, limit=PRICE_HISTORY_MAX_LEN + 50)
    except Exception as e:
        system_logger.error(f"Price processor ({symbol}): –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ get_initial_ohlcv: {e}", exc_info=True)
        if not stop_event_ref.is_set(): stop_event_ref.set()
        return

    if initial_close_prices_np.size < MIN_PRICE_HISTORY_FOR_TRADE:
        system_logger.error(f"Price processor ({symbol}): –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ({initial_close_prices_np.size} –∏–∑ –º–∏–Ω. {MIN_PRICE_HISTORY_FOR_TRADE}). –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–Ω –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
        if not stop_event_ref.is_set(): stop_event_ref.set()
        return 

    price_history_deque = collections.deque(
        initial_close_prices_np[-(PRICE_HISTORY_MAX_LEN):], 
        maxlen=PRICE_HISTORY_MAX_LEN
    )
    system_logger.info(f"Price processor ({symbol}): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω, {len(price_history_deque)} –∑–∞–ø–∏—Å–µ–π (maxlen={PRICE_HISTORY_MAX_LEN}).")

    try:
        while not stop_event_ref.is_set():
            new_close_price = None
            try:
                new_close_price = await asyncio.wait_for(price_queue.get(), timeout=1.0)
            except asyncio.TimeoutError:
                if stop_event_ref.is_set(): break
                continue

            system_logger.debug(f"Price processor ({symbol}): –ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {new_close_price} –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
            price_history_deque.append(new_close_price)
            current_prices_np_for_indicators = np.array(price_history_deque)

            if current_prices_np_for_indicators.size < MIN_PRICE_HISTORY_FOR_TRADE:
                trading_logger.info(f"Price processor ({symbol}): –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, {current_prices_np_for_indicators.size}/{MIN_PRICE_HISTORY_FOR_TRADE} —Ü–µ–Ω. –°–∏–≥–Ω–∞–ª—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è.")
                price_queue.task_done()
                continue

            # --- –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ (–°—Ç–æ–ø-–ª–æ—Å—Å, –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç) ---
            # –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç. strategy_has_issued_sell –∑–¥–µ—Å—å False, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –µ—â–µ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞—Å—å.
            # –ü–µ—Ä–µ–¥–∞–µ–º new_close_price –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
            risk_sell_executed = await check_and_handle_risk_conditions(symbol, profile, new_close_price, strategy_has_issued_sell=False)
            if risk_sell_executed:
                price_queue.task_done()
                continue # –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–Ω–µ

            # --- –®–∞–≥ 2: –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ---
            strategy_action = check_buy_sell_signals(
                profile, 
                current_prices_np_for_indicators, 
                new_close_price
            )
            
            action_taken_this_cycle = False
            if strategy_action == 'buy':
                # (–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π: –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∑–∏—Ü–∏—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç.–¥.)
                reason_msg_buy = f"üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è ({symbol}) –ø–æ–¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–û–ö–£–ü–ö–£ –ø–æ —Ü–µ–Ω–µ {new_close_price:.6f}."
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ 'buy' –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ check_buy_sell_signals
                # –ó–¥–µ—Å—å –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç place_order
                if await execute_trade_action("buy", symbol, profile, reason_msg_buy):
                    action_taken_this_cycle = True
            
            elif strategy_action == 'sell':
                # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ —Å–∏–≥–Ω–∞–ª—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                proceed_with_strategy_sell = True
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –ü–†–û–î–ê–ñ–ò –ø–æ –°–¢–†–ê–¢–ï–ì–ò–ò
                if getattr(settings, "USE_MIN_PROFIT_FOR_STRATEGY_SELL", False): # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Ñ–ª–∞–≥ –µ—Å—Ç—å –∏ True
                    if not is_enough_profit(symbol, new_close_price): # is_enough_profit —Å–∞–º–∞ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–º–µ–Ω—É
                        proceed_with_strategy_sell = False
                        trading_logger.info(f"Price processor ({symbol}): –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ is_enough_profit).")
                
                if proceed_with_strategy_sell:
                    reason_msg_sell = f"üìâ –°—Ç—Ä–∞—Ç–µ–≥–∏—è ({symbol}) –ø–æ–¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ü–†–û–î–ê–ñ–£ –ø–æ —Ü–µ–Ω–µ {new_close_price:.6f}."
                    if await execute_trade_action("sell", symbol, profile, reason_msg_sell):
                        action_taken_this_cycle = True

            # --- –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π) ---
            # –í—ã–∑—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–∞–∑–∞–ª–∞ 'hold' (—Ç.–µ. strategy_action == 'hold')
            # –∏ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ä–∏—Å–∫—É –∏–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
            if not action_taken_this_cycle and strategy_action == 'hold':
                # –ü–µ—Ä–µ–¥–∞–µ–º strategy_has_issued_sell=False, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–∞–ª–∞ —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                await check_and_handle_risk_conditions(symbol, profile, new_close_price, strategy_has_issued_sell=False)
                # –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–Ω—É—Ç—Ä–∏ –Ω–µ–µ (–µ—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–æ–¥–∞–∂–∞)
            
            price_queue.task_done()

    except asyncio.CancelledError:
        system_logger.info(f"Price processor ({symbol}): –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (asyncio.CancelledError).")
    except Exception as e:
        system_logger.error(f"Price processor ({symbol}): –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        if not stop_event_ref.is_set(): stop_event_ref.set()
    finally:
        system_logger.info(f"Price processor ({symbol}): –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")


async def trade_main(profile: SimpleNamespace):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∞–º–∏ listen_klines –∏ price_processor.
    """
    symbol = profile.SYMBOL
    system_logger.info(f"trade_main ({symbol}): –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile.SYMBOL}'.")
    
    stop_event = threading.Event()
    price_queue = asyncio.Queue(maxsize=100) 
    
    listener_task = None
    processor_task = None

    try:
        current_stop_event = CURRENT_STATE.get("stop_event")
        if current_stop_event is not None and not current_stop_event.is_set():
            system_logger.warning(f"trade_main ({symbol}): –û–±–Ω–∞—Ä—É–∂–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π stop_event –≤ CURRENT_STATE –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–µ—Å—Å–∏–∏. –ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é.")
            current_stop_event.set() 
            await asyncio.sleep(0.5) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–∞–∫—Ü–∏—é
        
        CURRENT_STATE["stop_event"] = stop_event
        system_logger.debug(f"trade_main ({symbol}): stop_event ({id(stop_event)}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ CURRENT_STATE.")
    except Exception as e:
        system_logger.critical(f"trade_main ({symbol}): –ù–ï –£–î–ê–õ–û–°–¨ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å stop_event –≤ CURRENT_STATE: {e}", exc_info=True)
        return

    try:
        listener_task = asyncio.create_task(
            listen_klines(symbol, profile.TIMEFRAME, price_queue, stop_event)
        )
        processor_task = asyncio.create_task(
            price_processor(price_queue, profile, stop_event) 
        )

        CURRENT_STATE["listener_task"] = listener_task
        CURRENT_STATE["processor_task"] = processor_task
        system_logger.debug(f"trade_main ({symbol}): listener_task –∏ processor_task –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ CURRENT_STATE.")

        await asyncio.gather(listener_task, processor_task)
        system_logger.info(f"trade_main ({symbol}): asyncio.gather(listener, processor) –∑–∞–≤–µ—Ä—à–µ–Ω.")

    except asyncio.CancelledError:
        system_logger.info(f"trade_main ({symbol}): –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (asyncio.CancelledError). –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
        if not stop_event.is_set():
            system_logger.info(f"trade_main ({symbol}): –£—Å—Ç–∞–Ω–æ–≤–∫–∞ stop_event –∏–∑-–∑–∞ CancelledError –≤ trade_main.")
            stop_event.set()
        
        tasks_to_cancel = [t for t in [listener_task, processor_task] if t and not t.done()]
        if tasks_to_cancel:
            for task in tasks_to_cancel: task.cancel()
            await asyncio.gather(*tasks_to_cancel, return_exceptions=True)
            system_logger.info(f"trade_main ({symbol}): –î–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–±—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã trade_main.")
            
    except Exception as e:
        system_logger.error(f"trade_main ({symbol}): –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–µ: {e}", exc_info=True)
        if not stop_event.is_set():
            system_logger.info(f"trade_main ({symbol}): –£—Å—Ç–∞–Ω–æ–≤–∫–∞ stop_event –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.")
            stop_event.set()
        
        tasks_to_cancel_on_error = [t for t in [listener_task, processor_task] if t and not t.done()]
        if tasks_to_cancel_on_error:
            for task in tasks_to_cancel_on_error: task.cancel()
            await asyncio.gather(*tasks_to_cancel_on_error, return_exceptions=True)
            system_logger.info(f"trade_main ({symbol}): –î–æ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ–±—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏ –≤ trade_main.")
            
    finally:
        system_logger.info(f"trade_main ({symbol}): –ë–ª–æ–∫ finally. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É stop_event.")
        if not stop_event.is_set():
            system_logger.warning(f"trade_main ({symbol}): stop_event –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫ –º–æ–º–µ–Ω—Ç—É finally. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ.")
            stop_event.set()
        
        system_logger.info(f"trade_main ({symbol}): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{symbol}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def trade_main_for_telegram(profile_name: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ trade_main –∏–∑ Telegram —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
    """
    system_logger.info(f"trade_main_for_telegram: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}'...")
    try:
        profile_dict = get_profile_by_name(profile_name)
        profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})
        system_logger.info(f"trade_main_for_telegram: –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–∑–æ–≤ trade_main.")
        await trade_main(profile)
    except FileNotFoundError as e:
        system_logger.error(f"trade_main_for_telegram: –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await send_notification(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        system_logger.error(f"trade_main_for_telegram: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}': {e}", exc_info=True)
        await send_notification(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile_name}'. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ª–æ–≥–µ.")

# –ë–ª–æ–∫ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
if __name__ == "__main__":
    if len(sys.argv) == 2:
        profile_name_arg = sys.argv[1]
        system_logger.info(f"run_trading_stream.py: –ó–∞–ø—É—Å–∫ –∏–∑ __main__ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile_name_arg}")
        try:
            profile_dict_main = get_profile_by_name(profile_name_arg)
            profile_main_obj = SimpleNamespace(**{k.upper(): v for k, v in profile_dict_main.items()})
            asyncio.run(trade_main(profile_main_obj))
        except FileNotFoundError:
            system_logger.error(f"run_trading_stream.py (__main__): –ü—Ä–æ—Ñ–∏–ª—å '{profile_name_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except KeyboardInterrupt:
            system_logger.info("run_trading_stream.py (__main__): –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (KeyboardInterrupt).")
        except Exception as e:
            system_logger.error(f"run_trading_stream.py (__main__): –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        finally:
            system_logger.info("run_trading_stream.py (__main__): –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            if logging.getLogger().handlers: 
                 logging.shutdown()
    else:
        print("–î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: python run_trading_stream.py <–∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è>")






  



