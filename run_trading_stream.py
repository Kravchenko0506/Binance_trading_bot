import sys
import argparse
import asyncio
import subprocess
from types import SimpleNamespace
from config.profile_loader import get_profile_by_name
from services.binance_stream import listen_klines
from services.trade_logic import check_buy_sell_signals
from services.order_execution import place_order
from utils.logger import setup_logger
from services.technical_indicators import talib
from config.settings import log_enabled_features
import pickle

async def price_processor(queue: asyncio.Queue, profile):
    while True:
        price = await queue.get()
        action = check_buy_sell_signals(profile)
        if action != 'hold':
            place_order(action, profile.SYMBOL, profile.COMMISSION_RATE)
        queue.task_done()

async def trade_main(profile):
    setup_logger()
    if talib is None:
        print("‚ö†Ô∏è TA-Lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º numpy fallback")
    print(f"\nüöÄ –¢–æ—Ä–≥–æ–≤–ª—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é {profile.SYMBOL} –Ω–∞—á–∞—Ç–∞!")
    log_enabled_features()
    action = check_buy_sell_signals(profile)
    if action != 'hold':
        place_order(action, profile.SYMBOL, profile.COMMISSION_RATE)

    queue = asyncio.Queue()
    try:
        listener = asyncio.create_task(
            listen_klines(profile.SYMBOL, profile.TIMEFRAME, queue)
        )
        processor = asyncio.create_task(
            price_processor(queue, profile)
        )
        await asyncio.gather(listener, processor)
    except asyncio.CancelledError:
        print("‚ùóÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ.")
        listener.cancel()
        processor.cancel()
        await asyncio.gather(listener, processor, return_exceptions=True)


if __name__ == "__main__":
    if len(sys.argv) == 2:
        profile_dict = get_profile_by_name(sys.argv[1])
        profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})
        asyncio.run(trade_main(profile))
    else:
        while True:
            print("\nüß† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Binance-–±–æ—Ç–∞")
            print("1. –í—ã–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            print("2. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π")
            print("3. –í—ã—Ö–æ–¥")
            choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ (1/2/3): ").strip()

            if choice == '1':
                from config.profile_loader import load_profiles
                profiles = load_profiles()
    
                if not profiles:
                    print("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä.")
                    continue

                print("\nüìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏:")
                for name in profiles:
                    print(f" - {name}")

                profile_name = input("\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è: ").strip().lower()
                if not profile_name:
                    print("‚ùå –ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
                    continue
                if profile_name not in profiles:
                    print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    continue

                try:
                    profile_dict = get_profile_by_name(profile_name)
                    profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})

                    print("\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º?")
                    print("1. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é")
                    print("2. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç")
                    print("3. ‚Ü©Ô∏è –ù–∞–∑–∞–¥")
                    action = input("–í—ã–±–æ—Ä (1/2/3): ").strip()

                    if action == '1':
                        asyncio.run(trade_main(profile))
                    elif action == '2':
                        
                        with open("temp_profile.pkl", "wb") as f:
                            pickle.dump(profile, f)
                        subprocess.run(["python", "backtest.py", "--from-pkl"])
                    else:
                        print("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
                except SystemExit:
                        continue

            
            elif choice == '2':
                subprocess.run(["python", "manage_profiles.py"])
            elif choice == '3':
                print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
                
# –≤ —Å–∞–º–æ–º –Ω–∏–∑—É run_trading_stream.py
async def trade_main_for_telegram(profile_name):
    from config.profile_loader import get_profile_by_name
    from types import SimpleNamespace

    profile_dict = get_profile_by_name(profile_name)
    profile = SimpleNamespace(**{k.upper(): v for k, v in profile_dict.items()})

    await trade_main(profile)
           





  



