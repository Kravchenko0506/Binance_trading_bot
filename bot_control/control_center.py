import asyncio

CURRENT_STATE = {
    "running": False,
    "profile_name": None,
    "task": None
}

def get_status():
    return {
        "running": CURRENT_STATE["running"],
        "profile": CURRENT_STATE["profile_name"]
    }

async def start_trading(profile_name: str, runner_function):
    if CURRENT_STATE["running"]:
        return f"‚ö†Ô∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {CURRENT_STATE['profile_name']}"

    CURRENT_STATE["profile_name"] = profile_name
    CURRENT_STATE["running"] = True

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é –∫–∞–∫ background-task
    CURRENT_STATE["task"] = asyncio.create_task(runner_function(profile_name))
    return f"üöÄ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—é: {profile_name}"

async def stop_trading():
    if not CURRENT_STATE["running"]:
        return "‚õîÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

    CURRENT_STATE["running"] = False
    CURRENT_STATE["profile_name"] = None

    task = CURRENT_STATE.get("task")
    if task and not task.done():
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass

    CURRENT_STATE["task"] = None
    return "üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
