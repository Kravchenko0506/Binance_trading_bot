# services/order_execution.py
import json
import os
from services.binance_client import client
from utils.quantity_utils import get_lot_size, round_step_size
# import config.settings as settings # settings –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å –¥–ª—è —Ñ–ª–∞–≥–æ–≤ USE_STOP_LOSS –∏ —Ç.–¥.
from colorama import Fore, Style
# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
# from utils.profit_check import is_enough_profit, is_stop_loss_triggered, is_take_profit_reached
import asyncio
from utils.notifier import send_notification # send_notification –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ price_processor
from utils.logger import trading_logger, system_logger # –î–æ–±–∞–≤–∏–º system_logger –¥–ª—è –æ—à–∏–±–æ–∫
from utils.position_manager import save_last_buy_price, clear_position, has_open_position


def get_balance(asset):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞."""
    try:
        balance = client.get_asset_balance(asset=asset)
        return float(balance['free'])
    except Exception as e:
        system_logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {asset}: {e}", exc_info=True)
        # await send_notification(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {asset}. –°–º. –ª–æ–≥–∏.") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª—É—á—à–µ –∏–∑ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã place_order –º–æ–≥ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å



def place_order(action: str, symbol: str, commission_rate: float): # commission_rate —Ç–µ–ø–µ—Ä—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    """
    –†–∞–∑–º–µ—â–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É.
    –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è (RSI, MACD, Stop-Loss, Take-Profit, Min-Profit)
    —Ç–µ–ø–µ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –í–ù–ï —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≤ price_processor).
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ.
    """
    trading_logger.info(f"place_order: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {action} –¥–ª—è {symbol}")
    step_size, min_qty = None, None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        step_size, min_qty = get_lot_size(symbol)
        if step_size is None or min_qty is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è
            trading_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å LOT_SIZE (step_size –∏–ª–∏ min_qty) –¥–ª—è {symbol}. –û—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω.")
            # await send_notification(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è {symbol}. –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
            return # –í–∞–∂–Ω–æ –≤—ã–π—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    except Exception as e:
        trading_logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ LOT_SIZE –¥–ª—è {symbol}: {e}", exc_info=True)
        # await send_notification(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è {symbol}. –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    current_price = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –û–î–ò–ù –†–ê–ó –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞
        # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Ü–µ–Ω–∞ –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, —Ç.–∫. –ø—Ä–æ–¥–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤–∞
        if action == 'buy':
            current_price = float(client.get_symbol_ticker(symbol=symbol)['price'])
    except Exception as e:
        trading_logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {action}: {e}", exc_info=True)
        # await send_notification(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol} –ø–µ—Ä–µ–¥ –æ—Ä–¥–µ—Ä–æ–º {action}. –û—Ä–¥–µ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")
        return # –ù–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±–µ–∑ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏

    quantity = 0.0

    if action == 'buy':
        try:
            usdt_balance = get_balance('USDT')
            if current_price == 0: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                trading_logger.error(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol} —Ä–∞–≤–Ω–∞ 0. –ü–æ–∫—É–ø–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                return
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ USDT
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
            # (1 - commission_rate) –Ω–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∞–µ—Ç —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–∫—É–ø–∞–µ–º, —á—Ç–æ–±—ã —Ö–≤–∞—Ç–∏–ª–æ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
            # –ù–æ —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω–æ, —Ç.–∫. –∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è –æ—Ç —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏.
            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç: quantity_to_buy_with_usdt = usdt_balance / (current_price * (1 + commission_rate))
            # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –æ–Ω —á—É—Ç—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–µ–µ.
            raw_quantity = (usdt_balance / current_price) * (1 - commission_rate) # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —á—Ç–æ–±—ã —Ö–≤–∞—Ç–∏–ª–æ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é
            quantity = round_step_size(raw_quantity, step_size)
            trading_logger.info(f"–†–∞—Å—á–µ—Ç –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}: –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance}, –¶–µ–Ω–∞: {current_price}, raw_qty: {raw_quantity}, –æ–∫—Ä—É–≥–ª_qty: {quantity}, min_qty: {min_qty}")

            if quantity >= min_qty:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
                # –≠—Ç–æ –æ—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ç.–∫. —Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è.
                # Binance —Å–∞–º–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç –æ—Ä–¥–µ—Ä, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤.
                estimated_cost = quantity * current_price 
                if estimated_cost > usdt_balance * 0.99: # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å
                    trading_logger.warning(f"–†–∞—Å—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} –¥–ª—è {symbol} –ø–æ —Ü–µ–Ω–µ {current_price} (—Å—Ç–æ–∏–º–æ—Å—Ç—å {estimated_cost}) –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å USDT {usdt_balance}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã.")
                    # –ú–æ–∂–Ω–æ –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å, –∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å Binance —Ä–µ—à–∏—Ç—å.

                trading_logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ MARKET BUY: {quantity} {symbol}")
                order = client.order_market_buy(symbol=symbol, quantity=quantity)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
                fills = order.get('fills', [])
                if not fills: # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω —Å—Ä–∞–∑—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è MARKET)
                    trading_logger.warning(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É {symbol} —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ (fills). ID –æ—Ä–¥–µ—Ä–∞: {order.get('orderId')}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ—Ç fills (–º–µ–Ω–µ–µ —Ç–æ—á–Ω–æ)
                    save_last_buy_price(symbol, avg_price_filled) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø—ã—Ç–∞–ª–∏—Å—å –∫—É–ø–∏—Ç—å
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ä–¥–µ—Ä–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                    asyncio.create_task(send_notification(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä MARKET BUY –¥–ª—è {symbol} qty {quantity} —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –¥–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —Å—Ä–∞–∑—É."))
                    return # –í—ã—Ö–æ–¥–∏–º, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞

                total_qty_filled = sum(float(f.get('qty', 0)) for f in fills)
                total_cost = sum(float(f.get('price', 0)) * float(f.get('qty', 0)) for f in fills)
                avg_price_filled = total_cost / total_qty_filled if total_qty_filled else 0
                
                total_commission = sum(float(f.get('commission', 0)) for f in fills)
                commission_asset = fills[0].get('commissionAsset', '') if fills else ''

                log_message = (f"–ü–æ–∫—É–ø–∫–∞: {total_qty_filled:.6f} {symbol.replace('USDT', '')} –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ {avg_price_filled:.6f} USDT. "
                               f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_cost:.6f} USDT. –ö–æ–º–∏—Å—Å–∏—è: {total_commission:.6f} {commission_asset}.")
                trading_logger.info(log_message)
                print(Fore.GREEN + log_message + Style.RESET_ALL)
                
                save_last_buy_price(symbol, avg_price_filled) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è)
                msg_tg = (
                    f"üü¢ –ö–£–ü–õ–ï–ù–û\n"
                    f"–°–∏–º–≤–æ–ª: {symbol}\n"
                    f"–û–±—ä—ë–º: {total_qty_filled:.6f}\n"
                    f"–°—Ä. —Ü–µ–Ω–∞: {avg_price_filled:.4f} USDT\n"
                    f"–°—É–º–º–∞: {total_cost:.2f} USDT\n"
                    f"–ö–æ–º–∏—Å—Å–∏—è: {total_commission:.6f} {commission_asset}"
                )
                asyncio.create_task(send_notification(msg_tg))
            else:
                trading_logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({quantity}) < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}) –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {symbol}.")
                # asyncio.create_task(send_notification(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å {symbol}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} < –º–∏–Ω. {min_qty} –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç USDT."))
        except Exception as e:
            trading_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ü–û–ö–£–ü–ö–£ –¥–ª—è {symbol}: {e}", exc_info=True)
            asyncio.create_task(send_notification(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ü–û–ö–£–ü–ö–£ {symbol}. –°–º. –ª–æ–≥–∏."))


    elif action == 'sell':
        try:
            base_asset = symbol.replace('USDT', '') # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, XRP –∏–∑ XRPUSDT)
            asset_balance = get_balance(base_asset)
            # –ü—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –º—ã –æ–±—ã—á–Ω–æ —Ö–æ—Ç–∏–º –ø—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –∞–∫—Ç–∏–≤–∞
            # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ commission_rate –∑–¥–µ—Å—å –Ω–µ —Å–æ–≤—Å–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç.–∫. –∫–æ–º–∏—Å—Å–∏—è –±–µ—Ä–µ—Ç—Å—è –æ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏
            # –õ—É—á—à–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –≤–µ—Å—å –±–∞–ª–∞–Ω—Å, –∞ –±–∏—Ä–∂–∞ —Å–∞–º–∞ —É—á—Ç–µ—Ç –∫–æ–º–∏—Å—Å–∏—é.
            # raw_quantity = asset_balance * (1 - commission_rate) # –≠—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
            raw_quantity = asset_balance
            quantity = round_step_size(raw_quantity, step_size)
            trading_logger.info(f"–†–∞—Å—á–µ—Ç –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è {symbol}: –ë–∞–ª–∞–Ω—Å {base_asset}: {asset_balance}, raw_qty: {raw_quantity}, –æ–∫—Ä—É–≥–ª_qty: {quantity}, min_qty: {min_qty}")

            if quantity >= min_qty:
                # --- –£–î–ê–õ–Ø–ï–ú –ò–ó–ë–´–¢–û–ß–ù–´–ï –ü–†–û–í–ï–†–ö–ò –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê ---
                # –†–µ—à–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –ø–æ —Å—Ç–æ–ø-–ª–æ—Å—Å—É/—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É/–º–∏–Ω.–ø—Ä–æ—Ñ–∏—Ç—É
                # —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ –≤ price_processor –î–û –≤—ã–∑–æ–≤–∞ place_order.
                # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É 'sell'.

                # if settings.USE_STOP_LOSS and is_stop_loss_triggered(symbol): # –£–î–ê–õ–ï–ù–û
                #     trading_logger.warning(f"‚ùó Stop-loss: —É–±—ã—Ç–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç {settings.STOP_LOSS_RATIO*100:.1f}% ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞")
                # elif settings.USE_TAKE_PROFIT and is_take_profit_reached(symbol): # –£–î–ê–õ–ï–ù–û
                #     trading_logger.info(f"‚úÖ Take-profit: –ø—Ä–∏–±—ã–ª—å –ø—Ä–µ–≤—ã—à–∞–µ—Ç {settings.TAKE_PROFIT_RATIO*100:.1f}% ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º")
                # elif settings.USE_MIN_PROFIT and not is_enough_profit(symbol): # –£–î–ê–õ–ï–ù–û
                #     trading_logger.info("üìâ –ü—Ä–æ—Ñ–∏—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª ‚Äî –æ—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏")
                #     return # –ï—Å–ª–∏ –ø—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ min_profit, –≤—ã—Ö–æ–¥–∏–º

                trading_logger.info(f"–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ MARKET SELL: {quantity} {symbol}")
                order = client.order_market_sell(symbol=symbol, quantity=quantity)
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
                fills = order.get('fills', [])
                if not fills:
                    trading_logger.warning(f"–û—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É {symbol} —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ (fills). ID –æ—Ä–¥–µ—Ä–∞: {order.get('orderId')}")
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                    try:
                        clear_position(symbol)
                        trading_logger.info(f"–§–∞–π–ª —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏.")
                    except FileNotFoundError:
                        trading_logger.info(f"–§–∞–π–ª —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —É–¥–∞–ª–µ–Ω).")
                    except Exception as e_rem:
                         system_logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}: {e_rem}", exc_info=True)
                    asyncio.create_task(send_notification(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä MARKET SELL –¥–ª—è {symbol} qty {quantity} —Ä–∞–∑–º–µ—â–µ–Ω, –Ω–æ –¥–µ—Ç–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã —Å—Ä–∞–∑—É."))
                    return

                total_qty_filled = sum(float(f.get('qty', 0)) for f in fills)
                total_value_received = sum(float(f.get('price', 0)) * float(f.get('qty', 0)) for f in fills)
                avg_price_filled = total_value_received / total_qty_filled if total_qty_filled else 0
                
                total_commission = sum(float(f.get('commission', 0)) for f in fills)
                commission_asset = fills[0].get('commissionAsset', '') if fills else '' # –û–±—ã—á–Ω–æ USDT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏

                log_message = (f"–ü—Ä–æ–¥–∞–∂–∞: {total_qty_filled:.6f} {base_asset} –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ {avg_price_filled:.6f} USDT. "
                               f"–ü–æ–ª—É—á–µ–Ω–æ: {total_value_received:.6f} USDT. –ö–æ–º–∏—Å—Å–∏—è: {total_commission:.6f} {commission_asset}.")
                trading_logger.info(log_message)
                print(Fore.RED + log_message + Style.RESET_ALL)

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ü–µ–Ω–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞
                clear_position(symbol)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                msg_tg = (
                    f"üî¥ –ü–†–û–î–ê–ù–û\n"
                    f"–°–∏–º–≤–æ–ª: {symbol}\n"
                    f"–û–±—ä—ë–º: {total_qty_filled:.6f}\n"
                    f"–°—Ä. —Ü–µ–Ω–∞: {avg_price_filled:.4f} USDT\n"
                    f"–°—É–º–º–∞: {total_value_received:.2f} USDT\n"
                    f"–ö–æ–º–∏—Å—Å–∏—è: {total_commission:.6f} {commission_asset}"
                )
                asyncio.create_task(send_notification(msg_tg))
            else:
                trading_logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({asset_balance} {base_asset}, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ {quantity}) < –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({min_qty}) –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ {symbol}.")
                # asyncio.create_task(send_notification(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å {symbol}: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {quantity} < –º–∏–Ω. {min_qty} –∏–ª–∏ –±–∞–ª–∞–Ω—Å {base_asset} —Ä–∞–≤–µ–Ω 0."))
        except Exception as e:
            trading_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ü–†–û–î–ê–ñ–£ –¥–ª—è {symbol}: {e}", exc_info=True)
            asyncio.create_task(send_notification(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ü–†–û–î–ê–ñ–£ {symbol}. –°–º. –ª–æ–≥–∏."))
    else:
        trading_logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: '{action}' –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}")




