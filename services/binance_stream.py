import json
import threading
import asyncio
from websocket import create_connection
import logging

# –õ–æ–≥–≥–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π (root –∏–ª–∏ system)
logger = logging.getLogger("system")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
stop_event = threading.Event()


def _listen_thread(symbol: str, interval: str, queue: asyncio.Queue, loop: asyncio.AbstractEventLoop):
    url = f"wss://stream.binance.com:9443/ws/{symbol.lower()}@kline_{interval}"
    try:
        ws = create_connection(url)
        logger.info(f"üåê –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket {symbol} [{interval}]")
        while not stop_event.is_set():
            message = ws.recv()
            data = json.loads(message)
            k = data.get("k", {})
            if k.get("x"):  # –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã—Ç–∞
                price = float(k["c"])
                loop.call_soon_threadsafe(asyncio.create_task, queue.put(price))
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –≤ WebSocket –ø–æ—Ç–æ–∫–µ: {e}")
    finally:
        ws.close()
        logger.info("üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")


async def listen_klines(symbol: str, interval: str, queue: asyncio.Queue):
    loop = asyncio.get_event_loop()
    thread = threading.Thread(
        target=_listen_thread,
        args=(symbol, interval, queue, loop),
        daemon=True
    )
    thread.start()
    try:
        while not stop_event.is_set():
            await asyncio.sleep(3600)  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∂–∏–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    except asyncio.CancelledError:
        logger.info("üü° WebSocket –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ (listen_klines)")


def stop_websocket():
    logger.info("üõë –í—ã–∑–≤–∞–Ω stop_websocket() ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ WebSocket –ø–æ—Ç–æ–∫–∞")
    stop_event.set()
