# utils/position_manager.py
import os
import json
from utils.logger import trading_logger, system_logger
from services.binance_client import client


def get_last_buy_price_path(symbol: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ü–µ–Ω–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏."""
    return f"data/last_buy_price_{symbol}.json"


def has_open_position(symbol: str) -> bool:
    """True, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è)."""
    return os.path.exists(get_last_buy_price_path(symbol))


def save_last_buy_price(symbol: str, price: float):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ñ–∞–π–ª. –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è."""
    path = get_last_buy_price_path(symbol)
    if os.path.exists(path):
        trading_logger.warning(
            f"save_last_buy_price: –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump({"price": price}, f)
        trading_logger.info(f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è {symbol}: {price}")
    except Exception as e:
        system_logger.error(
            f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}: {e}", exc_info=True)


def load_last_buy_price(symbol: str) -> float | None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏."""
    path = get_last_buy_price_path(symbol)
    if not os.path.exists(path):
        return None
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            return float(data.get("price")) if "price" in data else None
    except Exception as e:
        system_logger.warning(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}: {e}", exc_info=True)
        return None


def clear_position(symbol: str):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏–µ–π ‚Äî –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤."""
    path = get_last_buy_price_path(symbol)
    try:
        if os.path.exists(path):
            os.remove(path)
            trading_logger.info(
                f"–§–∞–π–ª –ø–æ–∑–∏—Ü–∏–∏ —É–¥–∞–ª—ë–Ω –¥–ª—è {symbol} (–ø–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞)")
        else:
            trading_logger.debug(
                f"clear_position: –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Ä–∞–Ω–µ–µ.")
    except Exception as e:
        system_logger.error(
            f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}: {e}", exc_info=True)


def position_manager(profile):
    """
    –ï—Å–ª–∏ –Ω–∞ —Å—á–µ—Ç—É –µ—Å—Ç—å –º–æ–Ω–µ—Ç–∞, –Ω–æ —Ñ–∞–π–ª last_buy_price –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî 
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –≤—Å–µ–º —Ç—Ä–µ–π–¥–∞–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ BUY-–æ—Ä–¥–µ—Ä–∞.
    """
    symbol = profile.SYMBOL
    base_asset = symbol.replace('USDT', '')
    file_path = get_last_buy_price_path(symbol)

    if os.path.exists(file_path):
        trading_logger.info(
            f"position_manager: –ü–æ–∑–∏—Ü–∏—è –ø–æ {symbol} —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å base_asset
        balances = client.get_account().get('balances', [])
        balance = None
        for b in balances:
            if b['asset'] == base_asset:
                balance = float(b['free'])
                break
        if not balance or balance < 1e-8:
            trading_logger.info(
                f"position_manager: –ë–∞–ª–∞–Ω—Å {base_asset} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª.")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–π–¥—ã (–∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è) —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        trades = client.get_my_trades(symbol=symbol)
        buy_trades = [t for t in trades if t.get('isBuyer')]
        if not buy_trades:
            trading_logger.warning(
                f"position_manager: –ù–µ—Ç —Ç—Ä–µ–π–¥–æ–≤ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ {symbol}.")
            return

        # 3. –ò—â–µ–º orderId –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏
        last_order_id = buy_trades[-1]['orderId']
        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï —Ç—Ä–µ–π–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ —ç—Ç–æ—Ç orderId (—Å –∫–æ–Ω—Ü–∞)
        last_order_trades = []
        for t in reversed(buy_trades):
            if t['orderId'] == last_order_id:
                last_order_trades.append(t)
            else:
                break
        last_order_trades.reverse()  # –¥–ª—è –ø–æ—Ä—è–¥–∫–∞

        total_qty = 0
        total_cost = 0
        for t in last_order_trades:
            qty = float(t['qty'])
            price = float(t['price'])
            total_qty += qty
            total_cost += qty * price

        if total_qty == 0:
            trading_logger.warning(
                f"position_manager: –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–µ = 0.")
            return

        avg_price = total_cost / total_qty

        os.makedirs(os.path.dirname(file_path), exist_ok=True)
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump({"price": avg_price, "quantity": total_qty}, f)
        trading_logger.info(
            f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ {symbol}: —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ {avg_price}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {total_qty}"
        )

    except Exception as e:
        system_logger.error(
            f"–û—à–∏–±–∫–∞ sync_position_from_binance –¥–ª—è {symbol}: {e}", exc_info=True)
