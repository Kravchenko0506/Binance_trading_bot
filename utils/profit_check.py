# utils/profit_check.py

import json
import os
import asyncio

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ MIN_PROFIT_RATIO, STOP_LOSS_RATIO –∏ —Ç.–¥.
from config import settings 
# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
from utils.notifier import send_notification 
# –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
from utils.logger import trading_logger, system_logger 
from decimal import Decimal, getcontext


def get_last_buy_price_path(symbol: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ü–µ–Ω–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
    
    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'XRPUSDT'.

    Returns:
        str: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    return f"data/last_buy_price_{symbol}.json"


def save_last_buy_price(symbol: str, price: float):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –≤ JSON-—Ñ–∞–π–ª.
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é 'data', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
        price (float): –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏.
    """
    path = get_last_buy_price_path(symbol)
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True) # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        with open(path, "w", encoding="utf-8") as f:
            json.dump({"price": price}, f)
        trading_logger.info(f"Profit Check ({symbol}): –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ {price:.8f} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ '{path}'.")
    except IOError as e:
        trading_logger.error(f"Profit Check ({symbol}): –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ '{path}': {e}", exc_info=True)
        # –í–ê–ñ–ù–û: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        asyncio.create_task(send_notification(f"üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}! –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!"))
    except Exception as e:
        trading_logger.error(f"Profit Check ({symbol}): –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ '{path}': {e}", exc_info=True)
        asyncio.create_task(send_notification(f"üÜò –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {symbol}!"))


def load_last_buy_price(symbol: str) -> float | None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.

    Returns:
        float | None: –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞.
    """
    path = get_last_buy_price_path(symbol)
    if not os.path.exists(path):
        trading_logger.info(f"Profit Check ({symbol}): –§–∞–π–ª —Å —Ü–µ–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ '{path}' –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä–æ—è—Ç–Ω–æ, –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç).")
        return None 
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
            price = data.get("price")
            if price is None or not isinstance(price, (float, int)):
                trading_logger.error(f"Profit Check ({symbol}): –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ '{path}'. –ö–ª—é—á 'price' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –î–∞–Ω–Ω—ã–µ: {data}")
                return None
            # trading_logger.debug(f"Profit Check ({symbol}): –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ {float(price):.8f} –∏–∑ '{path}'.")
            return float(price)
    except json.JSONDecodeError as e:
        trading_logger.error(f"Profit Check ({symbol}): –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ —Ñ–∞–π–ª–∞ '{path}': {e}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–≥–ª–æ –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ.")
        return None
    except Exception as e: 
        trading_logger.error(f"Profit Check ({symbol}): –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –∏–∑ '{path}': {e}", exc_info=True)
        return None


def is_enough_profit(symbol: str, current_price: float, last_buy_price: float | None, context: str = "") -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞.
        current_price (float): –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞.
        last_buy_price (float | None): –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏.
        context (str): –ò—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞ ("risk" –∏–ª–∏ "strategy").

    Returns:
        bool: True, –µ—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.
    """
    if not getattr(settings, 'USE_MIN_PROFIT', False):
        return False

    if last_buy_price is None or last_buy_price <= 0:
        if context != "strategy":
            trading_logger.debug(f"[MinProfit] {symbol}: –ù–µ—Ç last_buy_price ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–º.")
        return True

    min_profit_ratio = getattr(settings, 'MIN_PROFIT_RATIO', 0.01)
    target_price = last_buy_price * (1 + min_profit_ratio)
    price_change_ratio = (current_price - last_buy_price) / last_buy_price
    profit_pct = price_change_ratio * 100

    if current_price >= target_price:
        if context != "strategy":
            trading_logger.info(
                f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –î–û–°–¢–ò–ì–ù–£–¢ –¥–ª—è {symbol}. "
                f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}, –¶–µ–ª—å: {target_price:.8f}. "
                f"–ü—Ä–æ—Ñ–∏—Ç: {profit_pct:.2f}%, –ü–æ—Ä–æ–≥: {min_profit_ratio*100:.2f}%"
            )
        return True
    else:
        if context != "strategy":
            trading_logger.info(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}. "
                f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}, –¶–µ–ª—å: {target_price:.8f}. "
                f"–ü—Ä–æ—Ñ–∏—Ç: {profit_pct:.2f}%, –ü–æ—Ä–æ–≥: {min_profit_ratio*100:.2f}%"
            )
        return False
    
def is_stop_loss_triggered(symbol: str, current_price: float, last_buy_price: float | None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ STOP_LOSS_RATIO.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
        current_price (float): –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞.
        last_buy_price (float | None): –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏. –ï—Å–ª–∏ None, —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–µ –º–æ–∂–µ—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å.

    Returns:
        bool: True, –µ—Å–ª–∏ —É–±—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞, –∏–Ω–∞—á–µ False.
    """
    if not getattr(settings, 'USE_STOP_LOSS', False): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        return False

    if last_buy_price is None or last_buy_price <= 0:
        trading_logger.debug(f"Stop-Loss Check ({symbol}): –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ - –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (—Ü–µ–Ω–∞: {last_buy_price}).")
        return False

    stop_loss_ratio = getattr(settings, 'STOP_LOSS_RATIO', -0.02) # –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    # (—Ü–µ–Ω–∞_–ø—Ä–æ–¥–∞–∂–∏ - —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏) / —Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏
    price_change_ratio = (current_price - last_buy_price) / last_buy_price
    
    # –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ú–ï–ù–¨–®–ï, —á–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π stop_loss_ratio
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ stop_loss_ratio = -0.02 (-2%), –∞ price_change_ratio = -0.03 (-3%), —Ç–æ —É—Å–ª–æ–≤–∏–µ True
    triggered = price_change_ratio < stop_loss_ratio
    
    if triggered:
        trading_logger.warning(
            f"‚ÄºÔ∏è Stop-Loss TRIGGERED for {symbol}! "
            f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}. "
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_ratio*100:.2f}%, –ü–æ—Ä–æ–≥ SL: {stop_loss_ratio*100:.2f}%"
        )
    else:
        trading_logger.debug(
            f"Stop-Loss Check ({symbol}): Not triggered. "
            f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}. "
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {price_change_ratio*100:.2f}%, –ü–æ—Ä–æ–≥ SL: {stop_loss_ratio*100:.2f}%"
        )
    return triggered


def is_take_profit_reached(symbol: str, current_price: float, last_buy_price: float | None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ TAKE_PROFIT_RATIO.

    Args:
        symbol (str): –¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–º–≤–æ–ª.
        current_price (float): –¢–µ–∫—É—â–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞.
        last_buy_price (float | None): –¶–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∫—É–ø–∫–∏. –ï—Å–ª–∏ None, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞, –∏–Ω–∞—á–µ False.
    """
    if not getattr(settings, 'USE_TAKE_PROFIT', False):
        return False

    if last_buy_price is None or last_buy_price <= 0:
        trading_logger.debug(f"Take-Profit Check ({symbol}): –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ ‚Äî –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (—Ü–µ–Ω–∞: {last_buy_price}).")
        return False

    take_profit_ratio = getattr(settings, 'TAKE_PROFIT_RATIO', 0.05)
    target_price = last_buy_price * (1 + take_profit_ratio)
    price_change_ratio = (current_price - last_buy_price) / last_buy_price
    profit_pct = price_change_ratio * 100

    if current_price >= target_price:
        trading_logger.info(
            f"‚úÖ Take-Profit REACHED for {symbol}! "
            f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}, –¶–µ–ª—å: {target_price:.8f}. "
            f"–ü—Ä–æ—Ñ–∏—Ç: {profit_pct:.2f}%, –ü–æ—Ä–æ–≥ TP: {take_profit_ratio*100:.2f}%"
        )
        return True
    else:
        trading_logger.debug(
            f"Take-Profit Check ({symbol}): –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. "
            f"–ö—É–ø–ª–µ–Ω–æ: {last_buy_price:.8f}, –¢–µ–∫—É—â–∞—è: {current_price:.8f}, –¶–µ–ª—å: {target_price:.8f}. "
            f"–ü—Ä–æ—Ñ–∏—Ç: {profit_pct:.2f}%, –ü–æ—Ä–æ–≥ TP: {take_profit_ratio*100:.2f}%"
        )
        return False    

